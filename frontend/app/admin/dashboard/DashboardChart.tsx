/** @format */
"use client"
import axios from "axios";
import { useEffect, useState } from "react";
import { BarChart, Bar, XAxis, YAxis, Tooltip, Rectangle, Legend } from "recharts";
const renderCustomAxisTick = ({ x, y, payload }) => {
    let path = "";

    switch (payload.value) {
        case "Áo":
            path =
                "M255.973 22.965c-43.313 0-95.117 14.71-126.66 30.12-33.538 13.63-60.84 30.408-80.33 60.542-26.22 40.536-38.948 103.153-30.278 202.797 24.886 8.635 47.288 6.054 70.272-1.73-7.203-32.898-6.04-65.776 2.072-92.645 8.872-29.395 26.72-53.085 52.886-57.17l11.56-1.804.305 11.697c.226 8.523.38 17.397.485 26.434l.113 26.338c-.155 36.707-1.593 76.298-5.328 116.182 23.522 7.64 61.78 12.326 99.99 12.597l19.18-.244c35.59-1.145 69.858-6.043 90.4-12.78-4.562-61.128-4.866-122.812-6.34-172.464l-.407-13.7 13.267 3.44c26.03 6.746 44.022 30.776 53.246 60.528 8.425 27.166 9.814 59.957 2.668 92.833 17.938 5.68 35.678 7.15 53.602 4.926l18.355-2.453c4.31-78.49-5.98-156.066-26.157-193.04L450.48 96.767c-19.39-22.354-44.318-35.044-73.71-46.207-28.146-14.427-76.6-27.595-120.797-27.595zm0 12.724c27.095 0 55.783 8.103 80.42 18.845-13.03 11.505-29.087 19.462-46.176 24.008l-32.764 72.228-28.53-70.442c-19.852-3.88-38.642-12.34-53.34-25.76 25.763-11.032 54.585-18.88 80.39-18.88zm2.416 119.08l14.655 22.226-14.59 21.084-14.725-21.084 14.66-22.226zm0 49.603l14.655 22.23-14.59 21.083-14.725-21.084 14.66-22.23zm0 48.957l14.655 22.227-14.59 21.086-14.725-21.086 14.66-22.227zm0 49.553l14.655 22.228-14.59 21.085-14.725-21.084 14.66-22.227zm104.645 57.226c-27.583 8.572-66.045 12.127-105.467 12.314-39.638.188-79.132-3.107-108.078-12.07-.854 7.45-1.793 14.893-2.828 22.312 24.902 8.897 68.203 14.22 110.56 14.016 42.322-.205 84.93-6.02 108.116-14.32-.848-7.374-1.613-14.796-2.303-22.253zm5.71 37.913c-28.3 9.63-68.984 13.61-110.698 13.81-12.246.06-24.475-.22-36.402-.89l-17.637-1.314c-22.358-2.09-43.007-5.768-59.787-11.507-3.742 22.658-8.426 44.944-14.243 66.354 8.833 4.422 18.403 8.212 28.52 11.404l16.564 4.575c66.132 15.875 149.713 8.995 206.963-14.658-5.656-21.24-9.96-44.108-13.28-67.774z";
            break;
        case "Quần":
            path =
                "M258.375 21.156c-44.557.187-87.24 7.376-118.563 21l-1.78 16.094h25.655v18.688H136l-2.125 19.406h29.813v18.687h-31.875l-38.72 352.876 123.344 24.813 34.157-262.845H236.688v-97.749H220.94V115.03h-38.562V96.345h38.563V76.938h-38.563V58.25h38.563V41.53h90.938v16.72h33.03v18.688h-33.03v19.406h33.03v18.687h-33.03v17.095h-56.499v79.063h27.406v18.687h-11.56l34.25 263.75h.217l129.063-26.28-38.72-352.314h-32.436V96.345H394l-2.156-19.406h-28.25V58.25h26.22l-1.783-16.094c-38.697-14.308-85.098-21.17-129.655-21zm-18.75 39.063v17.468h34.938v18.687h-34.938v17.063h53.563v-53.22h-53.563z";
            break;
        case "Váy":
            path =
                "M189.4 43.36l-20.3 10.18c0 32.03.8 87.86 13.9 130.96 58.3 14.2 87.7 14.2 146 0 13.3-43 13.9-86.54 14-130.96l-20.4-10.18c-4.4 5.74-11.7 15.04-21.8 26.57-7.2 8.16-14.8 16.36-22.1 22.8-3.6 3.22-7.1 6-10.6 8.17-3.6 2.2-7.1 4.1-12.1 4.1s-8.5-1.9-12.1-4.1c-3.5-2.17-7-4.95-10.6-8.17-7.3-6.44-14.9-14.64-22.1-22.8-10.1-11.53-17.4-20.83-21.8-26.57zm-8.6 159.04L57.3 449.5c.28 1.1.8 2.3 2.16 3.8 2 2.3 5.58 5.1 10.61 7.7 10.08 5.4 25.72 10.3 44.73 14.2 38 7.8 89.7 11.8 141.2 11.8 51.5 0 103.2-4 141.2-11.8 19-3.9 34.7-8.8 44.7-14.2 5.1-2.6 8.6-5.4 10.6-7.7 1.4-1.5 1.9-2.7 2.2-3.8L331.2 202.4c-58 13.9-92.4 13.9-150.4 0z";
            break;
        case "Giày":
            path =
                "M42.63 89c8.3 49.2 17.42 100.1 14.35 151.5-2.9 48.8-28.19 92.8-31.58 134.5h319.7c5.3-16.4 16.2-30.9 28.3-42.1 4.2-3.9 8.5-7.5 12.8-10.6-34.9-9.7-61.7-24-82.5-41.3H244v-18h41c-8.5-9.5-15.7-19.6-21.7-30H208v-18h46c-4.6-9.9-8.4-19.9-11.7-30H192v-18h44.8c-2.8-10.1-5.3-20.2-7.6-30H176v-18h49c-2.4-10.5-4.9-20.54-7.7-30H42.63zM128 215c31.4 0 57 25.6 57 57s-25.6 57-57 57c-31.37 0-57-25.6-57-57s25.63-57 57-57zm0 18c-21.6 0-39 17.4-39 39s17.4 39 39 39 39-17.4 39-39-17.4-39-39-39zm287.6 96c-5 .3-18.6 6.5-30 17.1-8.7 8-16.5 18.3-21.2 28.9H448c11.5 0 25.6-5.7 38.6-12.3-.4-4.2-1-7.7-2.2-10-1.6-3.3-3.9-5.7-8.7-8.3-9.6-5.2-28.9-9.5-60.1-15.4zm71.4 52.9c-2 .9-3.4 1.6-5.7 2.5C471 388.5 459 393 448 393H25v30h407c22.2 0 45.3-8.7 55-12.8v-28.3z";
            break;
        case "Túi":
            path =
                "M160 112c0-35.3 28.7-64 64-64s64 28.7 64 64v48H160V112zm-48 48H48c-26.5 0-48 21.5-48 48V416c0 53 43 96 96 96H352c53 0 96-43 96-96V208c0-26.5-21.5-48-48-48H336V112C336 50.1 285.9 0 224 0S112 50.1 112 112v48zm24 48a24 24 0 1 1 0 48 24 24 0 1 1 0-48zm152 24a24 24 0 1 1 48 0 24 24 0 1 1 -48 0z";
            break;
        case "Khác":
            path =
                "M254.508 28c-5.222.018-14.484.378-23.54 4.976-10.348 5.255-19.542 17.498-19.542 36.025h18c0-13.472 4.287-17.23 9.693-19.974C244.525 46.282 251.937 46 256.486 46c10 0 15.38 3.006 18.743 6.891 3.362 3.885 4.899 9.373 4.414 15.385-.97 12.023-9.745 20.744-23.157 23.724h-9v33.827a30.751 30.751 0 0 1 9-1.354c3.22 0 6.203.504 9 1.354v-16.881c18.771-4.339 30.699-21.88 32.098-39.221.806-9.988-1.72-20.5-8.744-28.615C281.816 32.996 270.486 28 256.486 28c-.568 0-1.232-.004-1.978-.002zm1.978 114.474c-6.265 0-11.583 4.417-18.386 12.397-6.803 7.979-13.779 18.644-24.745 25.699-28.987 18.65-62.68 28.155-93.978 39.095-31.299 10.941-59.94 23.174-80.246 45.407-2.822 3.09-7.223 13.039-9.813 21.666-.096.322-.127.52-.22.838 5.8-2.233 12.63-5.031 20.767-8.487 17.698-7.515 40.062-17.32 64.102-27.023 48.079-19.405 102.272-38.735 142.67-38.063 44.692.744 104.792 20.664 154.664 40.139 32.956 12.87 56.173 23.383 71.601 30.582-2.63-8.098-6.458-16.803-9.06-19.652-20.306-22.233-48.947-34.466-80.246-45.407-31.3-10.94-64.992-20.445-93.979-39.095-10.965-7.055-17.94-17.72-24.744-25.7-6.803-7.979-12.121-12.396-18.387-12.396zm-87 121.527v220h158v-220zm-66.408 12c-15.547 6.491-29.735 12.64-42.303 18h90.711v-18zm242.408 0v18h114.418a1313.695 1313.695 0 0 0-42.357-18z";
            break;
        default:
    }

    return (
        <svg x={x - 14} y={y + 4} width={60} height={60} viewBox='0 0 1024 1024' fill='#666'>
            <path d={path} />
        </svg>
    );
};
const renderCustomBarLabel = ({ payload, x, y, width, height, value }) => {
    return <text x={x + width / 2} y={y} fill="#666" textAnchor="middle" dy={-6}>{`${value}`}</text>;
};
function DashboardChart() {
    const [responsive, setResponsive] = useState({})
    const [entered, setEntered] = useState({})
    const [loader, setLoader] = useState(false)
    useEffect(() => {
        const fetchData = async function () {
            try {
                const responsive = await axios({
                    method: "get",
                    url: "http://localhost:4000/report/chart-type-entered"
                })
                setEntered(responsive.data.data)
            } catch (error) {
                console.log(error)
            }
            finally {
                setLoader(true)
            }
        }
        fetchData()
    }, [])
    useEffect(() => {
        const fetchData = async function () {
            try {
                const responsive = await axios({
                    method: "get",
                    url: "http://localhost:4000/report/chart-type-sold"
                })
                setResponsive(responsive.data.data)
            } catch (error) {
                console.log(error)
            }
            finally {
                setLoader(true)
            }
        }
        fetchData()
    }, [])
    if (!loader) {
        return <p>...Loader</p>
    }
    const data = [
        { name: "Áo", "Đã nhập": entered.shirt, "Đã bán": responsive.shirt },
        { name: "Quần", "Đã nhập": entered.trouser, "Đã bán": responsive.trouser },
        { name: "Váy", "Đã nhập": entered.dress, "Đã bán": responsive.dress },
        { name: "Giày", "Đã nhập": entered.shoe, "Đã bán": responsive.shoe },
        { name: "Túi", "Đã nhập": entered.bag, "Đã bán": responsive.bag },
        { name: "Khác", "Đã nhập": entered.more, "Đã bán": responsive.more },
    ];
    return (
        <section style={{ marginTop: "100px", display: "flex", justifyContent: "center", alignItems: "center", flexDirection: "column" }}>
            <BarChart width={1000} height={400} data={data}>
                <XAxis dataKey='name' tick={renderCustomAxisTick} />
                <YAxis />
                <Tooltip wrapperStyle={{ backgroundColor: '#ccc' }} />
                <Legend height={50} iconSize={30} verticalAlign="top" />
                <Bar dataKey='Đã bán' barSize={40} fill='#8884d8' label={renderCustomBarLabel} />
                <Bar dataKey='Đã nhập' barSize={40} fill='red' label={renderCustomBarLabel} />
            </BarChart>
            <h2 style={{ marginTop: "34px", textTransform: "capitalize", fontSize: "18px", fontWeight: "bold" }}>Biểu đồ nhập và xuất theo phân loại</h2>
        </section>
    );
}

export default DashboardChart;
